name: Docker CI/CD

on:
  push:
    branches:
      - main

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to Docker Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      
      - name: Create environment file
        run: |
          API_BASE_URL=${{ secrets.API_BASE_URL }} > frontend/.env
          JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }} > backend/.env
          PG_HOST=${{ secrets.PG_HOST }} >> backend/.env
          PG_USER=${{ secrets.PG_USER }} >> backend/.env
          PG_PASSWORD=${{ secrets.PG_PASSWORD }} >> backend/.env
          PG_PORT=${{ secrets.PG_PORT }} >> backend/.env
          PG_DATABASE=${{ secrets.PG_DATABASE }} >> backend/.env
        
      # - name: generate env for production
      #   run: VERSION=RELEASE python genenv.py 

      - name: Build API Docker image
        run: docker build -f Dockerfile.app -t ${{ secrets.REGISTRY_URL }}/fcn-api .

      - name: Push API Docker image
        run: docker push ${{ secrets.REGISTRY_URL }}/fcn-api
      
      - name: Build Frontend Docker image
        run: docker build -t ${{ secrets.REGISTRY_URL }}/fcn-frontend frontend/.
      
      - name: Push Frontend Docker image
        run: docker push ${{ secrets.REGISTRY_URL }}/fcn-frontend


  deploy-on-server:
    runs-on: ubuntu-latest
    needs: build-and-push-image

    steps:
      - name: Install SSH key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      
      - name: SSH to remote server and create network (if not exist)
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} 'docker network create fcn_network'
        continue-on-error: true

      - name: SSH to remote server and pull API Docker image
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} 'docker pull ${{ secrets.REGISTRY_URL }}/fcn-api'
      
      - name: SSH to remote server and stop existed API container
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} 'docker stop fcn-api && docker rm fcn-api'
        continue-on-error: true
      
      - name: SSH to remote server and run API Docker container
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}  'docker run --name fcn-api --restart=always --network fcn_network -p 8000:8000 -d ${{ secrets.REGISTRY_URL }}/fcn-api'
      

      - name: SSH to remote server and pull frontend Docker image
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} 'docker pull ${{ secrets.REGISTRY_URL }}/fcn-frontend'
      
      - name: SSH to remote server and stop existed frontend container
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} 'docker stop fcn-frontend && docker rm fcn-frontend'
        continue-on-error: true
      
      - name: SSH to remote server and run frontend Docker container
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}  'docker run --name fcn-frontend --restart=always --network fcn_network -p 3000:3000 -d ${{ secrets.REGISTRY_URL }}/fcn-frontend'